From 461e67ac9d6b27ba528a0404bc12baac927dbb86 Mon Sep 17 00:00:00 2001
From: sthaiya <sthaiya@hotmail.com>
Date: Fri, 13 Sep 2024 19:28:51 +0300
Subject: [PATCH] Added option to reject samples at Workplan Level

---
 compile.sh                                    |  25 +++
 dev/properties/eclipse_common.properties      |   4 +-
 frontend/src/components/workplan/Workplan.js  | 137 ++++++++++++-
 frontend/src/languages/en.json                |   1 +
 pom.xml                                       |   3 +-
 .../AccessionNumberValidatorFactory.java      |  16 +-
 .../validation/DateNumAccessionValidator.java | 188 ++++++++++++++++++
 .../sample/bean/SampleEditItem.java           |  21 ++
 .../controller/SampleEditController.java      |   2 +-
 .../rest/SampleEditRestController.java        |   1 -
 .../sample/service/SampleEditServiceImpl.java |  63 +++++-
 .../sample/util/AccessionNumberUtil.java      |  10 +
 .../resources/languages/message_en.properties |   4 +-
 13 files changed, 456 insertions(+), 19 deletions(-)
 create mode 100755 compile.sh
 create mode 100755 src/main/java/org/openelisglobal/common/provider/validation/DateNumAccessionValidator.java

diff --git a/compile.sh b/compile.sh
new file mode 100755
index 000000000..00cca696f
--- /dev/null
+++ b/compile.sh
@@ -0,0 +1,25 @@
+#!/bin/bash 
+
+# First compile the code
+mvn install -DskipTests -o
+
+#Search for an existing container
+CONTAINERID=$(docker ps -a -q -f name=openelisglobal-webapp)
+echo $CONTAINERID
+
+if [[ $CONTAINERID != "" ]]
+then
+	echo "---- We have a container to Re-Use ----"
+	#docker stop $CONTAINERID && docker rm -f $CONTAINERID
+	#docker-compose up -d --build
+
+	# For now instead of removing and building the container, just replace the files
+	docker exec -u 0 -it $CONTAINERID rm -fr /usr/local/tomcat/webapps/OpenELIS-Global.war
+	docker cp target/OpenELIS-Global.war $CONTAINERID:/usr/local/tomcat/webapps/OpenELIS-Global.war
+
+
+else
+	echo "---- There is no OpenELIS docker container. Building a new one ----"
+	# Build and start the new container
+	#docker-compose up -d --build
+fi
\ No newline at end of file
diff --git a/dev/properties/eclipse_common.properties b/dev/properties/eclipse_common.properties
index 2f41346eb..a2bf12cb1 100644
--- a/dev/properties/eclipse_common.properties
+++ b/dev/properties/eclipse_common.properties
@@ -1,7 +1,7 @@
-server.ssl.key-store = file:/home/greg/workspace10/OpenELIS-Global-2/dev/https/oe_selfsigned.keystore
+server.ssl.key-store = file:/home/thaiya/eclipse-workspace/OpenELIS-Global-2/dev/https/oe_selfsigned.keystore
 server.ssl.key-store-password = testtest
 server.ssl.key-password = testtest
-server.ssl.trust-store=file:/home/greg/workspace10/OpenELIS-Global-2/dev/https/oe_selfsigned.truststore
+server.ssl.trust-store=file:/home/thaiya/eclipse-workspace/OpenELIS-Global-2/dev/https/oe_selfsigned.truststore
 server.ssl.trust-store-password=testtest
 
 spring.datasource.driver=org.postgresql.Driver
diff --git a/frontend/src/components/workplan/Workplan.js b/frontend/src/components/workplan/Workplan.js
index 37b3d7d4e..18e65e30f 100644
--- a/frontend/src/components/workplan/Workplan.js
+++ b/frontend/src/components/workplan/Workplan.js
@@ -4,6 +4,7 @@ import {
   Grid,
   Heading,
   Link,
+  Modal,
   Section,
   Table,
   TableBody,
@@ -13,12 +14,14 @@ import {
   TableRow,
   Pagination,
 } from "@carbon/react";
-import React, { useState, useContext, useEffect } from "react";
+import React, { useState, useContext, useEffect, useRef } from "react";
 import "../Style.css";
 import "./wpStyle.css";
 import { FormattedMessage, useIntl } from "react-intl";
 import WorkplanSearchForm from "./WorkplanSearchForm";
 import {
+  getFromOpenElisServer,
+  postToOpenElisServer,
   postToOpenElisServerForPDF,
   convertAlphaNumLabNumForDisplay,
 } from "../utils/Utils";
@@ -26,8 +29,11 @@ import { NotificationContext } from "../layout/Layout";
 import { AlertDialog, NotificationKinds } from "../common/CustomNotification";
 import { ConfigurationContext } from "../layout/Layout";
 import PageBreadCrumb from "../common/PageBreadCrumb";
+import CustomCheckBox from "../common/CustomCheckBox";
+import CustomSelect from "../common/CustomSelect";
 
 export default function Workplan(props) {
+  const componentMounted = useRef(false);
   const { configurationProperties } = useContext(ConfigurationContext);
   const { notificationVisible, setNotificationVisible, addNotification } =
     useContext(NotificationContext);
@@ -42,6 +48,14 @@ export default function Workplan(props) {
   const [selectedLabel, setSelectedLabel] = useState("");
   const [page, setPage] = useState(1);
   const [pageSize, setPageSize] = useState(20);
+  const [rejectSampleReasons, setRejectSampleReasons] = useState([]);
+  const [isOpen, setIsOpen] = useState(false);
+  const defaultSelect = { id: "", value: "Choose Rejection Reason" };
+  const [selectedRejectReason, setSelectedRejectReason] = useState(null);
+  const [selectedOrder, setSelectedOrder] = useState(null);
+  const [selectedOrderTestId, setSelectedOrderTestId] = useState(null);
+  const [selectedSampleGroupId, setSelectedSampleGroupId] = useState(null);
+  const [rejectWholeSample, setRejectWholeSample] = useState(false);
 
   const type = props.type;
   let title = "";
@@ -167,12 +181,84 @@ export default function Workplan(props) {
       testsList[index].notIncludedInWorkplan = false;
     }
   };
+  
+  const fetchRejectSampleReasons = (res) => {
+    if (componentMounted.current) {
+      setRejectSampleReasons(res);
+    }
+  };
+      
+  const handleRejectSample = async (e) => {
+    e.preventDefault();
+	if (selectedRejectReason) {
+		getFromOpenElisServer("/rest/sample-edit?accessionNumber=" + selectedOrder, loadOrderValues);
+		setIsOpen(false);
+	} else {
+		addNotification({
+		  kind: NotificationKinds.error,
+		  title: intl.formatMessage({ id: "notification.title" }),
+		  message: "Reject Reason is Required",
+		});
+		setNotificationVisible(true);
+	}
+  };
+    
+  const loadOrderValues = async (data) => {
+      if (componentMounted.current) {
+        data.sampleOrderItems.referringSiteName = "";
+		data.sampleOrderItems.modified = true;
+		let sampleAccessionNumber = selectedOrder + "-" + selectedSampleGroupId;
+		let sampleItemId=undefined;
+		data.existingTests.forEach((test, index) => {
+			if (test.accessionNumber === sampleAccessionNumber)
+				sampleItemId = test.sampleItemId;
+			
+			if (test.sampleItemId === sampleItemId && (test.testId === selectedOrderTestId || rejectWholeSample)){
+				data.existingTests[index]['rejected']='true';
+				data.existingTests[index]['rejectReasonId']=selectedRejectReason;
+				data.existingTests[index]['sampleItemChanged']='true';
+			}
+		})
+		
+		postToOpenElisServer("/rest/sample-edit", JSON.stringify(data), handlePost);
+      }
+    };
+
+	const handlePost = (status) => {
+	  if (status === 200) {
+		addNotification({
+		  kind: NotificationKinds.success,
+		  title: intl.formatMessage({ id: "notification.title" }),
+		  message: "Sample Rejected Successfully",
+		});
+	  } else {
+		addNotification({
+		  kind: NotificationKinds.error,
+		  title: intl.formatMessage({ id: "notification.title" }),
+		  message: "Error Rejecting Sample",
+		});
+	  }
+	  setNotificationVisible(true);
+	  setRejectWholeSample(false);
+	};
 
   let rowColorIndex = 2;
   let showAccessionNumber = false;
   let currentAccessionNumber = "";
 
   let breadcrumbs = [{ label: "home.label", link: "/" }];
+  
+  useEffect(() => {
+    componentMounted.current = true;
+    getFromOpenElisServer(
+      "/rest/test-rejection-reasons",
+      fetchRejectSampleReasons,
+    );
+    window.scrollTo(0, 0);
+    return () => {
+      componentMounted.current = false;
+    };
+  }, []);
 
   return (
     <>
@@ -218,6 +304,38 @@ export default function Workplan(props) {
               </Column>
             </Grid>
             <br />
+			{ isOpen &&
+				<Modal
+	              open={isOpen}
+	              size="sm"
+				  danger
+	              onRequestClose={() => setIsOpen(false)}
+	              modalHeading={<FormattedMessage id="sample.reject.label" />}
+	              primaryButtonText={<FormattedMessage id="column.name.reject" />}
+	              secondaryButtonText="Cancel"
+	              onRequestSubmit={handleRejectSample}
+	            >
+				  <CustomSelect
+				    id={"rejectedReasonId_"}
+					labelText={intl.formatMessage({ id: "workplan.priority.list" })}
+				    options={rejectSampleReasons}
+					defaultSelect={defaultSelect}
+					required
+					onChange={(selectedItem) => {
+		              setSelectedRejectReason(selectedItem);
+		            }}
+				  />
+				  <br />
+				  <CustomCheckBox
+				  	  id={"reject_all"}
+				  	  label={"Reject Complete Sample"}
+				  	  onChange={(value) => {
+				  		setRejectWholeSample(value);	  		
+				  	  }}
+				  	/>
+	            </Modal>
+			}
+					
             <Grid fullWidth={true}>
               <Column sm={4} md={8} lg={16}>
                 <FormattedMessage id="label.total.tests" /> = {testsList.length}
@@ -268,6 +386,9 @@ export default function Workplan(props) {
                         )}
                         <TableHeader>
                           <FormattedMessage id="sample.receivedDate" />
+                        </TableHeader>
+						<TableHeader>
+                          <FormattedMessage id="sample.reject.label" />
                         </TableHeader>
                       </TableRow>
                     </TableHead>
@@ -357,6 +478,20 @@ export default function Workplan(props) {
                                 <TableCell>{row.testName}</TableCell>
                               )}
                               <TableCell>{row.receivedDate}</TableCell>
+							  <TableCell>
+								<CustomCheckBox
+								  id={"reject_" + index}
+								  label={""}
+								  onChange={(value) => {
+									if (value) {
+										setSelectedOrder(row.accessionNumber);
+										setSelectedOrderTestId(row.testId);
+										setSelectedSampleGroupId(row.sampleGroupingNumber);
+										setIsOpen(true);
+									}
+								  }}
+								/>
+							  </TableCell>
                             </TableRow>
                           );
                         })}
diff --git a/frontend/src/languages/en.json b/frontend/src/languages/en.json
index 2dc47150e..849beb0c3 100644
--- a/frontend/src/languages/en.json
+++ b/frontend/src/languages/en.json
@@ -108,6 +108,7 @@
   "patient.subject.number": "Unique Health ID number",
   "sample.entry.nextVisit.date": "Date of next visit",
   "sample.entry.project.testName": "Test Name",
+  "label.total.tests": "Analysis in Total",
   "result.nonconforming.item": "Sample or order is nonconforming OR test has been rejected",
   "sample.entry.project.patient.and.testName": "Name/Code of patient {br} Test Name",
   "label.button.remove": "Remove",
diff --git a/pom.xml b/pom.xml
index d7db495d4..2e4678d2b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <!-- for deployment cycles -->
   <!-- <version>${major.version}.${minor.version}.${fix.version}</version> -->
   <!-- for development cycles -->
-  <version>${major.version}.${minor.version}.${state.version}.${fix.version}</version>
+  <version>${major.version}.${minor.version}.${state.version}.${fix.version}-${modify.version}</version>
   <packaging>war</packaging>
   <properties>
     <maven.java.release>11</maven.java.release>
@@ -17,6 +17,7 @@
     <state.version>3</state.version>
     <!-- 0 = alpha, 1 = beta, 2 = rc, 3 = deployable -->
     <fix.version>2</fix.version>
+    <modify.version>1</modify.version>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <liquibase.propertyFile>${project.basedir}/liquibase/liquibase.properties</liquibase.propertyFile>
     <castor.version>1.4.1</castor.version>
diff --git a/src/main/java/org/openelisglobal/common/provider/validation/AccessionNumberValidatorFactory.java b/src/main/java/org/openelisglobal/common/provider/validation/AccessionNumberValidatorFactory.java
index 9936f4e40..1541f84ad 100644
--- a/src/main/java/org/openelisglobal/common/provider/validation/AccessionNumberValidatorFactory.java
+++ b/src/main/java/org/openelisglobal/common/provider/validation/AccessionNumberValidatorFactory.java
@@ -16,6 +16,7 @@
 package org.openelisglobal.common.provider.validation;
 
 import org.openelisglobal.common.exception.LIMSInvalidConfigurationException;
+import org.openelisglobal.common.log.LogEvent;
 import org.openelisglobal.common.util.ConfigurationListener;
 import org.openelisglobal.common.util.ConfigurationProperties;
 import org.openelisglobal.common.util.ConfigurationProperties.Property;
@@ -26,7 +27,7 @@ public class AccessionNumberValidatorFactory implements ConfigurationListener {
 
     public enum AccessionFormat {
         MAIN, GENERAL, SITEYEARNUM, PROGRAMNUM, YEARNUM_SIX, YEARNUM_DASH_SEVEN, YEARNUM_SEVEN, UNFORMATTED, ALT_YEAR,
-        ALPHANUM
+        ALPHANUM, DATENUM
     }
 
     private AccessionFormat mainAccessionFormat;
@@ -71,6 +72,11 @@ public class AccessionNumberValidatorFactory implements ConfigurationListener {
                     mainGenerator = getYearNumValidator(7, null);
                     mainAccessionFormat = AccessionFormat.YEARNUM_SEVEN;
                 }
+            } else if (accessionFormat.equals("DATENUM")) {
+                if (!mainGeneratorSet) {
+                    mainGenerator = getDateNumValidator(3);
+                    mainAccessionFormat = AccessionFormat.DATENUM;
+                }
             }
 
             if (mainGenerator == null) {
@@ -107,6 +113,8 @@ public class AccessionNumberValidatorFactory implements ConfigurationListener {
             return getYearNumValidator(7, null);
         case ALT_YEAR:
             return getAltYearValidator();
+        case DATENUM:
+            return getDateNumValidator(3);
         default:
             throw new LIMSInvalidConfigurationException(
                     "AccessionNumberValidatorFactory: Unable to find validator for " + accessionFormat);
@@ -136,6 +144,8 @@ public class AccessionNumberValidatorFactory implements ConfigurationListener {
             return getYearNumValidator(7, null);
         case ALT_YEAR:
             return getAltYearValidator();
+        case DATENUM:
+            return getDateNumValidator(3);
         case GENERAL:
             throw new LIMSInvalidConfigurationException(
                     "AccessionNumberValidatorFactory: ALL_ACTIVE unable to be used as a generator ");
@@ -173,6 +183,10 @@ public class AccessionNumberValidatorFactory implements ConfigurationListener {
     private IAccessionNumberGenerator getProgramValidator() {
         return new ProgramAccessionValidator();
     }
+    
+    private IAccessionNumberGenerator getDateNumValidator(int length) {
+        return new DateNumAccessionValidator(length);
+    }
 
     @Override
     public void refreshConfiguration() {
diff --git a/src/main/java/org/openelisglobal/common/provider/validation/DateNumAccessionValidator.java b/src/main/java/org/openelisglobal/common/provider/validation/DateNumAccessionValidator.java
new file mode 100755
index 000000000..da311fcb3
--- /dev/null
+++ b/src/main/java/org/openelisglobal/common/provider/validation/DateNumAccessionValidator.java
@@ -0,0 +1,188 @@
+/**
+ * The contents of this file are subject to the Mozilla Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS"
+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+ * License for the specific language governing rights and limitations under
+ * the License.
+ *
+ * The Original Code is OpenELIS code.
+ *
+ * Copyright (C) The Minnesota Department of Health.  All Rights Reserved.
+ *
+ * Contributor(s): CIRG, University of Washington, Seattle WA.
+ */
+package org.openelisglobal.common.provider.validation;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.openelisglobal.common.log.LogEvent;
+import org.openelisglobal.common.util.ConfigurationProperties;
+import org.openelisglobal.common.util.ConfigurationProperties.Property;
+import org.openelisglobal.common.util.DateUtil;
+import org.openelisglobal.internationalization.MessageUtil;
+import org.openelisglobal.sample.service.SampleService;
+import org.openelisglobal.sample.util.AccessionNumberUtil;
+import org.openelisglobal.spring.util.SpringContext;
+
+public class DateNumAccessionValidator implements IAccessionNumberGenerator {
+
+    protected SampleService sampleService = SpringContext.getBean(SampleService.class);
+
+    private static final boolean NEED_PROGRAM_CODE = false;
+    private static final String DATE_PATTERN = "yyMMdd";
+    private static Set<String> REQUESTED_NUMBERS = new HashSet<>();
+    private String incrementStartingValue = "001"; // this value will be changed by the calling validator factory 
+    private int acccessionLength = 10;
+    private int incrementLength = 3;
+    private String incrementFormat;
+    
+    public DateNumAccessionValidator(int length) {
+        this.incrementLength = length;
+        incrementFormat = "%0" + String.valueOf(length) + "d";
+        incrementStartingValue = String.format(incrementFormat, 1);
+        acccessionLength = length + 6;
+    }
+    
+    @Override
+    public boolean needProgramCode() {
+        return NEED_PROGRAM_CODE;
+    }
+
+    @Override
+    public ValidationResults validFormat(String accessionNumber, boolean checkDate) {
+        if (!Boolean
+                .valueOf(ConfigurationProperties.getInstance().getPropertyValue(Property.ACCESSION_NUMBER_VALIDATE))) {
+            return AccessionNumberUtil.containsBlackListCharacters(accessionNumber) ? ValidationResults.FORMAT_FAIL
+                    : ValidationResults.SUCCESS;
+        }
+        // The rule is YYMMDD formatted date and incremented numbers
+        if (accessionNumber.length() != acccessionLength)
+            return ValidationResults.LENGTH_FAIL;
+
+        if (checkDate) {
+            if (!DateUtil.getCurrentDateAsText(DATE_PATTERN).equals(accessionNumber.substring(0, 6)))
+                return ValidationResults.FORMAT_FAIL;
+        }
+
+        return ValidationResults.SUCCESS;
+    }
+
+    @Override
+    public String getInvalidMessage(ValidationResults results) {
+        switch (results) {
+            case LENGTH_FAIL:
+                LogEvent.logError(DateNumAccessionValidator.class.getSimpleName(), "getInvalidMessage", "LENGTH_FAIL");
+                return MessageUtil.getMessage("sample.entry.invalid.accession.number.length");
+            case USED_FAIL:
+                LogEvent.logError(DateNumAccessionValidator.class.getSimpleName(), "getInvalidMessage", "USED_FAIL");
+                return MessageUtil.getMessage("sample.entry.invalid.accession.number.suggestion") + " " + getNextAvailableAccessionNumber(null, true);
+            case FORMAT_FAIL:
+                LogEvent.logError(DateNumAccessionValidator.class.getSimpleName(), "getInvalidMessage", "FORMAT_FAIL");
+                return getInvalidFormatMessage(results);
+            default:
+                return MessageUtil.getMessage("sample.entry.invalid.accession.number");
+        }
+    }
+    
+    /**
+     * Returns an accession number of format; YYMMDD### e.g. 230405001
+     */
+    @Override
+    public String getNextAvailableAccessionNumber(String prefix, boolean reserve) {
+        prefix = DateUtil.getCurrentDateAsText(DATE_PATTERN);
+        String nextAccessionNumber;
+        String curLargestAccessionNumber = sampleService.getLargestAccessionNumberWithPrefix(prefix);
+        if (curLargestAccessionNumber == null) {
+            if (!REQUESTED_NUMBERS.isEmpty() && !REQUESTED_NUMBERS.iterator().next().substring(0, 6).equals(prefix)) REQUESTED_NUMBERS.clear();
+            nextAccessionNumber = REQUESTED_NUMBERS.isEmpty() ? createFirstAccessionNumber() : REQUESTED_NUMBERS.iterator().next();
+        } else
+            nextAccessionNumber = incrementAccessionNumber(curLargestAccessionNumber);
+
+        while (REQUESTED_NUMBERS.contains(nextAccessionNumber)) {
+            nextAccessionNumber = incrementAccessionNumber(nextAccessionNumber);
+        }
+
+        REQUESTED_NUMBERS.add(nextAccessionNumber);
+
+        return nextAccessionNumber;
+    }
+
+    @Override
+    public int getMaxAccessionLength() {
+        return acccessionLength;
+    }
+
+    @Override
+    public int getMinAccessionLength() {
+        return getMaxAccessionLength();
+    }
+
+    // recordType parameter is not used in this case
+    @Override
+    public boolean accessionNumberIsUsed(String accessionNumber, String recordType) {
+        return sampleService.getSampleByAccessionNumber(accessionNumber) != null;
+    }
+
+    @Override
+    public ValidationResults checkAccessionNumberValidity(String accessionNumber, String recordType, String isRequired, String projectFormName) {
+        ValidationResults results = validFormat(accessionNumber, true);
+        if (results == ValidationResults.SUCCESS && accessionNumberIsUsed(accessionNumber, null))
+            results = ValidationResults.USED_FAIL;
+        
+        return results;
+    }
+
+    @Override
+    public String getInvalidFormatMessage(ValidationResults results) {
+        return MessageUtil.getMessage("sample.entry.invalid.accession.number.format.corrected", new String[] { getFormatPattern(), getFormatExample() });
+    }
+    
+    @Override
+    public int getInvarientLength() {
+        return 0;
+    }
+
+    @Override
+    public int getChangeableLength() {
+        return getMaxAccessionLength() - getInvarientLength();
+    }
+
+    @Override
+    public String getPrefix() {
+        return DateUtil.getCurrentDateAsText(DATE_PATTERN);
+    }
+
+    @Override
+    public String getNextAccessionNumber(String datePrefix, boolean reserve) {
+        return this.getNextAvailableAccessionNumber(datePrefix, reserve);
+    }
+    
+    private String createFirstAccessionNumber() {
+        return getPrefix() + incrementStartingValue;
+    }
+    
+    private String getFormatPattern() {
+        return DATE_PATTERN + "XXX";
+    }
+
+    private String getFormatExample() {
+        return createFirstAccessionNumber();
+    }
+    
+    public String incrementAccessionNumber(String currentHighAccessionNumber) {
+        int nextSeq = Integer.parseInt(currentHighAccessionNumber.substring(currentHighAccessionNumber.length()- incrementLength)) + 1;
+        
+        StringBuilder strMaxAccessionNumber = new StringBuilder();
+        strMaxAccessionNumber.append("9".repeat(incrementLength));
+        
+        if (nextSeq > Integer.parseInt(strMaxAccessionNumber.toString()))
+            throw new IllegalArgumentException("AccessionNumber has no next value");
+        
+        return currentHighAccessionNumber.substring(0, acccessionLength - incrementLength) + String.format(incrementFormat, nextSeq);
+    }
+}
diff --git a/src/main/java/org/openelisglobal/sample/bean/SampleEditItem.java b/src/main/java/org/openelisglobal/sample/bean/SampleEditItem.java
index 407e756b3..f5b78d388 100644
--- a/src/main/java/org/openelisglobal/sample/bean/SampleEditItem.java
+++ b/src/main/java/org/openelisglobal/sample/bean/SampleEditItem.java
@@ -55,6 +55,11 @@ public class SampleEditItem {
 
     // for display in the react Data table. set as the testId
     private String id;
+    
+    private boolean rejected;
+    
+    @Pattern(regexp = ValidationHelper.ID_REGEX, groups = { SampleEditForm.SampleEdit.class })
+    private String rejectReasonId;
 
     public String getAccessionNumber() {
         return accessionNumber;
@@ -200,4 +205,20 @@ public class SampleEditItem {
     public void setId(String id) {
         this.id = id;
     }
+    
+    public String getRejectReasonId() {
+        return rejectReasonId;
+    }
+
+    public void setRejectReasonId(String rejectReasonId) {
+        this.rejectReasonId = rejectReasonId;
+    }
+    
+    public boolean isRejected() {
+        return rejected;
+    }
+
+    public void setRejected(boolean rejected) {
+    	this.rejected = rejected;
+    }
 }
diff --git a/src/main/java/org/openelisglobal/sample/controller/SampleEditController.java b/src/main/java/org/openelisglobal/sample/controller/SampleEditController.java
index 1f22aa69c..f499fa1bc 100644
--- a/src/main/java/org/openelisglobal/sample/controller/SampleEditController.java
+++ b/src/main/java/org/openelisglobal/sample/controller/SampleEditController.java
@@ -87,7 +87,7 @@ public class SampleEditController extends BaseController {
             "accessionNumber", "newAccessionNumber", "isEditable", "maxAccessionNumber",
             "existingTests*.sampleItemChanged", "existingTests*.sampleItemId", "existingTests*.analysisId",
             "existingTests*.collectionDate", "existingTests*.collectionTime", "existingTests*.removeSample",
-            "existingTests*.canceled", "possibleTests*.testId", "possibleTests*.sampleItemId", "possibleTests*.add" };
+            "existingTests*.canceled", "possibleTests*.testId", "possibleTests*.sampleItemId", "possibleTests*.add"};
 
     @Autowired
     SampleEditFormValidator formValidator;
diff --git a/src/main/java/org/openelisglobal/sample/controller/rest/SampleEditRestController.java b/src/main/java/org/openelisglobal/sample/controller/rest/SampleEditRestController.java
index f9d04fc7d..45c1e50ce 100644
--- a/src/main/java/org/openelisglobal/sample/controller/rest/SampleEditRestController.java
+++ b/src/main/java/org/openelisglobal/sample/controller/rest/SampleEditRestController.java
@@ -211,7 +211,6 @@ public class SampleEditRestController extends BaseSampleEntryController {
 
         try {
             sampleEditService.editSample(form, request, updatedSample, sampleChanged, getSysUserId(request));
-
         } catch (LIMSRuntimeException e) {
             if (e.getCause() instanceof StaleObjectStateException) {
                 result.reject("errors.OptimisticLockException", "errors.OptimisticLockException");
diff --git a/src/main/java/org/openelisglobal/sample/service/SampleEditServiceImpl.java b/src/main/java/org/openelisglobal/sample/service/SampleEditServiceImpl.java
index d0f925c5b..ee64b4f86 100644
--- a/src/main/java/org/openelisglobal/sample/service/SampleEditServiceImpl.java
+++ b/src/main/java/org/openelisglobal/sample/service/SampleEditServiceImpl.java
@@ -1,7 +1,10 @@
 package org.openelisglobal.sample.service;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
+
 import javax.servlet.http.HttpServletRequest;
 import org.apache.commons.validator.GenericValidator;
 import org.openelisglobal.analysis.service.AnalysisService;
@@ -104,14 +107,14 @@ public class SampleEditServiceImpl implements SampleEditService {
     @Autowired
     NoteService noteService;
 
-    @Transactional
+    @Transactional(readOnly=true)
     @Override
     public void editSample(SampleEditForm form, HttpServletRequest request, Sample updatedSample, boolean sampleChanged,
             String sysUserId) {
 
-        List<SampleEditItem> existingTests = form.getExistingTests() != null ? form.getExistingTests()
-                : new ArrayList<>();
+        List<SampleEditItem> existingTests = form.getExistingTests() != null ? form.getExistingTests() : new ArrayList<>();
         List<Analysis> cancelAnalysisList = createRemoveList(existingTests, sysUserId);
+        List<Analysis> rejectAnalysisList = createRejectList(existingTests, sysUserId);
         List<SampleItem> updateSampleItemList = createSampleItemUpdateList(existingTests, sysUserId);
         List<SampleItem> cancelSampleItemList = createCancelSampleList(existingTests, cancelAnalysisList, sysUserId);
         List<Analysis> addAnalysisList = createAddAanlysisList(
@@ -132,14 +135,12 @@ public class SampleEditServiceImpl implements SampleEditService {
             collectionDateFromRecieveDate = receivedDateForDisplay + " 00:00:00";
         }
 
-        SampleAddService sampleAddService = new SampleAddService(form.getSampleXML(), sysUserId, updatedSample,
-                collectionDateFromRecieveDate);
+        SampleAddService sampleAddService = new SampleAddService(form.getSampleXML(), sysUserId, updatedSample, collectionDateFromRecieveDate);
         List<SampleTestCollection> addedSamples = createAddSampleList(form, sampleAddService);
 
         SampleOrderService sampleOrderService = new SampleOrderService(form.getSampleOrderItems());
         sampleOrderService.setSample(updatedSample);
-        SampleOrderService.SampleOrderPersistenceArtifacts orderArtifacts = sampleOrderService
-                .getPersistenceArtifacts(updatedSample, sysUserId);
+        SampleOrderService.SampleOrderPersistenceArtifacts orderArtifacts = sampleOrderService.getPersistenceArtifacts(updatedSample, sysUserId);
 
         if (orderArtifacts.getSample() != null) {
             sampleChanged = true;
@@ -157,10 +158,15 @@ public class SampleEditServiceImpl implements SampleEditService {
             existingSampleHuman.setProviderId(orderArtifacts.getProvider().getId());
         }
         sampleHumanService.update(existingSampleHuman);
+        
 
         for (SampleItem sampleItem : updateSampleItemList) {
             sampleItemService.update(sampleItem);
         }
+        
+        for (Analysis analysis : rejectAnalysisList) {
+            analysisService.update(analysis);
+        }
 
         for (Analysis analysis : cancelAnalysisList) {
             analysisService.update(analysis);
@@ -193,6 +199,23 @@ public class SampleEditServiceImpl implements SampleEditService {
          * paymentObservation.setPatientId(patient.getId());
          * observationDAO.insertOrUpdateData(paymentObservation); }
          */
+        
+        
+        // Check if to reject sample
+        Sample thisSample = sampleService.getSampleByAccessionNumber(form.getAccessionNumber());
+        
+        Set<Integer> excludedAnalysisStatus = new HashSet<>();
+        excludedAnalysisStatus.add(Integer.parseInt(SpringContext.getBean(IStatusService.class).getStatusID(AnalysisStatus.SampleRejected)));
+        excludedAnalysisStatus.add(Integer.parseInt(SpringContext.getBean(IStatusService.class).getStatusID(AnalysisStatus.Canceled)));
+        
+        List<Analysis> allSampleAnalyses = analysisService.getAnalysesBySampleIdExcludedByStatusId(thisSample.getId(), excludedAnalysisStatus);
+    	for (Analysis analysis : allSampleAnalyses) {
+    		SampleItem sampleItem = analysis.getSampleItem();
+    		sampleItem.setRejected(false);
+        	sampleItem.setRejectReasonId(null);
+        	sampleItem.setStatusId(SpringContext.getBean(IStatusService.class).getStatusID(SampleStatus.Entered));
+        	break;
+    	}
 
         for (SampleTestCollection sampleTestCollection : addedSamples) {
             String sampleId = sampleItemService.insert(sampleTestCollection.item);
@@ -328,15 +351,19 @@ public class SampleEditServiceImpl implements SampleEditService {
 
         for (SampleEditItem editItem : existingTests) {
             if (editItem.isSampleItemChanged()) {
-                SampleItem sampleItem = sampleItemService.get(editItem.getSampleItemId());
+            	SampleItem sampleItem = sampleItemService.get(editItem.getSampleItemId());
                 if (sampleItem != null) {
                     String collectionTime = editItem.getCollectionDate();
                     if (GenericValidator.isBlankOrNull(collectionTime)) {
                         sampleItem.setCollectionDate(null);
                     } else {
-                        collectionTime += " " + (GenericValidator.isBlankOrNull(editItem.getCollectionTime()) ? "00:00"
-                                : editItem.getCollectionTime());
+                        collectionTime += " " + (GenericValidator.isBlankOrNull(editItem.getCollectionTime()) ? "00:00" : editItem.getCollectionTime());
                         sampleItem.setCollectionDate(DateUtil.convertStringDateToTimestamp(collectionTime));
+                    }   
+                    if (editItem.isRejected()) {
+                    	sampleItem.setRejected(true);
+                    	sampleItem.setRejectReasonId(editItem.getRejectReasonId());
+                    	sampleItem.setStatusId(SpringContext.getBean(IStatusService.class).getStatusID(SampleStatus.SampleRejected));
                     }
                     sampleItem.setSysUserId(sysUserId);
                     modifyList.add(sampleItem);
@@ -476,6 +503,22 @@ public class SampleEditServiceImpl implements SampleEditService {
 
         return removeAnalysisList;
     }
+    
+
+    private List<Analysis> createRejectList(List<SampleEditItem> tests, String sysUserId) {
+        List<Analysis> rejectAnalysisList = new ArrayList<>();
+
+        for (SampleEditItem sampleEditItem : tests) {           
+            if (sampleEditItem.isRejected()) {
+            	Analysis analysis = analysisService.get(sampleEditItem.getAnalysisId());
+                analysis.setSysUserId(sysUserId);
+                analysis.setStatusId(SpringContext.getBean(IStatusService.class).getStatusID(AnalysisStatus.SampleRejected));
+                rejectAnalysisList.add(analysis);
+            }
+        }
+
+        return rejectAnalysisList;
+    }
 
     private Analysis getCancelableAnalysis(SampleEditItem sampleEditItem, String sysUserId) {
         Analysis analysis = analysisService.get(sampleEditItem.getAnalysisId());
diff --git a/src/main/java/org/openelisglobal/sample/util/AccessionNumberUtil.java b/src/main/java/org/openelisglobal/sample/util/AccessionNumberUtil.java
index 6fc8561ea..f493b9efb 100644
--- a/src/main/java/org/openelisglobal/sample/util/AccessionNumberUtil.java
+++ b/src/main/java/org/openelisglobal/sample/util/AccessionNumberUtil.java
@@ -130,10 +130,20 @@ public class AccessionNumberUtil {
         return null;
     }
 
+    public static IAccessionNumberValidator getDateNumNumberValidator() {
+        try {
+            return accessionNumberValidatorFactory.getValidator(AccessionFormat.DATENUM);
+        } catch (LIMSInvalidConfigurationException e) {
+            LogEvent.logError("AccessionNumberUtil", "getDateNumNumberValidator", e.toString());
+        }
+        return null;
+    }
+
     public static List<IAccessionNumberValidator> getAllActiveAccessionNumberValidators() {
         List<IAccessionNumberValidator> activeValidators = new ArrayList<>();
         activeValidators.add(AccessionNumberUtil.getMainAccessionNumberGenerator());
         activeValidators.add(AccessionNumberUtil.getProgramAccessionNumberValidator());
+        activeValidators.add(AccessionNumberUtil.getDateNumNumberValidator());
         if (Boolean
                 .valueOf(ConfigurationProperties.getInstance().getPropertyValue(Property.USE_ALT_ACCESSION_PREFIX))) {
 
diff --git a/src/main/resources/languages/message_en.properties b/src/main/resources/languages/message_en.properties
index e295993aa..733cec78a 100644
--- a/src/main/resources/languages/message_en.properties
+++ b/src/main/resources/languages/message_en.properties
@@ -4809,7 +4809,7 @@ report.january                                         = January
 report.july                                            = July
 report.june                                            = June
 report.labInfomation                                   = General Comments
-report.labManager                                      = Laboratory Manager
+report.labManager                                      = Laboratory Director
 report.labName.one.LNSP_Haiti                          = MINIST\u00C8RE DE LA \
                                                          SANT\u00C9 PUBLIQUE \
                                                          ET DE LA POPULATION
@@ -4904,7 +4904,7 @@ report.referringSiteDepartment                         = Ward/Dept/Unit
 report.regionFacility                                  = County
 report.rejection.report.base                           = Rejection reports
 report.report                                          = Report
-report.reportDate                                      = Date of Report
+report.reportDate                                      = Report Date
 report.requestOrderNumber                              = Requester Lab Number
 report.requesterContact                                = Requester contact
 report.result                                          = Result
-- 
2.34.1

