# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Docker Images

on:
  # push:
  #   branches: [develop]
  # release:
  #   types: [published]
  # workflow_dispatch:
  workflow_run:
    workflows: ["OpenELIS Frontend QA framework workflow"]  
    types:
      - completed
      

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_NAME: ${{ vars.DOCKERHUB_USERNAME }}/openelis-global-2
  DOCKER_TEST_NAME: ${{ vars.DOCKERHUB_USERNAME }}/openelis-global-2-test

jobs:
  build-and-push-test-image-backend:
    #if: ${{ github.repository == 'DIGI-UW/OpenELIS-Global-2' }}
    if : false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_TEST_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}:buildcache
          # cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}:buildcache,mode=max
          build-args: SKIP_SPOTLESS=true

  build-and-push-test-image-frontend:
    #if: ${{ github.repository == 'DIGI-UW/OpenELIS-Global-2' }}
    if : false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_TEST_NAME }}-frontend

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache,mode=max

  build-and-push-test-image-proxy:
    #if: ${{ github.repository == 'DIGI-UW/OpenELIS-Global-2' }}
    if : false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_TEST_NAME }}-proxy

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx-proxy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-proxy:buildcache,mode=max

  build-and-push-test-image-fhir:
    #if: ${{ github.repository == 'DIGI-UW/OpenELIS-Global-2' }}
    if : false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_TEST_NAME }}-fhir

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./fhir
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-fhir:buildcache,mode=max

  run-e2e-qa:
    if : false
    needs:
      [build-and-push-test-image-backend, build-and-push-test-image-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout OpenELIS-Global2
        uses: actions/checkout@v4
        with:
          repository: ${{github.repository}}

      - name: Run OpenELIS image
        run: docker compose -f test.docker-compose.yml up -d --build --wait --wait-timeout 300

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
        env:
          CYPRESS_STARTUP_WAIT_MILLISECONDS: 300000
          CYPRESS_VIDEO: false

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          # Only show last 100 lines of each
          tail: "100"

  run-condition :
     if: ${{ github.repository == 'DIGI-UW/OpenELIS-Global-2' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'pull_request' }}
     runs-on: ubuntu-latest
     steps:
      - run: echo "ðŸ“¦ Publishing Docker Image"
    

  build-and-push-image-backend:
    needs: [run-condition]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker tag
        id: determine-tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF##*/}"
          else
            # fallback: use branch or SHA
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
            TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}
          tags: |
            type=raw,value=${{ env.TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}:buildcache
          # cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}:buildcache,mode=max
          build-args: SKIP_SPOTLESS=true

  build-and-push-image-frontend:
    needs: [run-condition]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker tag
        id: determine-tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF##*/}"
          else
            # fallback: use branch or SHA
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
            TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV    

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}-frontend
          tags: |
            type=raw,value=${{ env.TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-frontend:buildcache,mode=max

  build-and-push-image-proxy:
    needs: [run-condition]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker tag
        id: determine-tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF##*/}"
          else
            # fallback: use branch or SHA
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
            TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV    

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}-proxy
          tags: |
            type=raw,value=${{ env.TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx-proxy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-proxy:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-proxy:buildcache,mode=max

  build-and-push-image-fhir:
    needs: [run-condition]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: Determine Docker tag
        id: determine-tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF##*/}"
          else
            # fallback: use branch or SHA
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
            TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV     

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}-fhir
          tags: |
            type=raw,value=${{ env.TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./fhir
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-fhir:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_TEST_NAME }}-fhir:buildcache,mode=max
